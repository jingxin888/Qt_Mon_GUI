###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         22/Dec/2024  14:12:04 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\Source\coordinator.c #
#    Command line       =  -f F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\se #
#                          nsors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ           #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\se #
#                          nsors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO         #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€ #
#                          Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\sensors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\GenericA #
#                          pp\Source\coordinator.c -D ZTOOL_P1 -D MT_TASK -D  #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\s #
#                          ensors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\P #
#                          rojects\zstack\Samples\GenericApp\CC2530DB\Coordin #
#                          atorEB\List\ -lA F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏ #
#                          Â-‘”÷æ-≤Œøº\sensors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC #
#                          2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\CoordinatorEB\List\ --diag_suppress          #
#                          Pe001,Pa010 -o F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â- #
#                          ‘”÷æ-≤Œøº\sensors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 #
#                          0DB\CoordinatorEB\Obj\ -e --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\se #
#                          nsors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Samples\GenericApp\CC2530DB\ -I      #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\Source\  #
#                          -I F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\se #
#                          nsors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\.. #
#                          \ZMain\TI2530DB\ -I F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\ #
#                          Õ∂∏Â-‘”÷æ-≤Œøº\sensors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack #
#                          -CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\ #
#                          CC2530DB\..\..\..\..\..\Components\hal\include\    #
#                          -I F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\se #
#                          nsors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\target\CC2530EB\ -I          #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\include\ -I                     #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\high_level\ -I                  #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\low_level\srf04\ -I             #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\low_level\srf04\single_chip\    #
#                          -I F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\se #
#                          nsors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mt\ -I                           #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\osal\include\ -I                    #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\services\saddr\ -I                  #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\services\sdata\ -I                  #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\af\ -I                        #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sapi\ -I                      #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sys\ -I                       #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\zdo\ -I                       #
#                          F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\zmac\ -I F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬ #
#                          €Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\sensors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generic #
#                          App\CC2530DB\..\..\..\..\..\Components\zmac\f8w\   #
#                          -Ohz --require_prototypes                          #
#    List file          =  F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\Coordinator #
#                          EB\List\coordinator.lst                            #
#    Object file        =  F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\senso #
#                          rs-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\Coordinator #
#                          EB\Obj\coordinator.r51                             #
#                                                                             #
#                                                                             #
###############################################################################

F:\ACAD\À∂ ø\A±œ…Ë–°≥µ\–°¬€Œƒ\Õ∂∏Â-‘”÷æ-≤Œøº\sensors-Ã·Ωª≤ƒ¡œ-≤›∏Â\‘¥¥˙¬Î\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\Source\coordinator.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 5 seconds.  The application will also
     46            receives "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "GenericApp.h"
     70          #include "DebugTrace.h"
     71          
     72          #if !defined( WIN32 )
     73            #include "OnBoard.h"
     74          #endif
     75          
     76          /* HAL */
     77          #include "hal_lcd.h"
     78          #include "hal_led.h"
     79          #include "hal_key.h"
     80          #include "hal_uart.h"
     81          
     82          /* RTOS */
     83          #if defined( IAR_ARMCM3_LM )
     84          #include "RTOS_App.h"
     85          #endif  
     86          
     87          /*********************************************************************
     88           * MACROS
     89           */
     90          
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */
    102          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    103          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
    104          {
    105            GENERICAPP_CLUSTERID
    106          };
    107          

   \                                 In  segment XDATA_ROM_C, align 1
    108          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW GenericApp_ClusterList
    109          {
    110            GENERICAPP_ENDPOINT,              //  int Endpoint;
    111            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    112            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    113            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    114            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    115            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    116            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    117            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    118            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    119          };
    120          
    121          // This is the Endpoint/Interface description.  It is defined here, but
    122          // filled-in in GenericApp_Init().  Another way to go would be to fill
    123          // in the structure here and make it a "const" (in code space).  The
    124          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139                                    // This variable will be received when
    140                                    // GenericApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    147          
    148          /*********************************************************************
    149           * LOCAL FUNCTIONS
    150           */
    151          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    152          static void GenericApp_HandleKeys( byte shift, byte keys );
    153          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    154          static void GenericApp_SendTheMessage( void );
    155          static void rxCB(uint8 port,uint8 event);//…˘√˜¥Æø⁄ªÿµ˜∫Ø ˝
    156          
    157          #if defined( IAR_ARMCM3_LM )
    158          static void GenericApp_ProcessRtosMessage( void );
    159          #endif
    160          
    161          /*********************************************************************
    162           * NETWORK LAYER CALLBACKS
    163           */
    164          
    165          /*********************************************************************
    166           * PUBLIC FUNCTIONS
    167           */
    168          
    169          /*********************************************************************
    170           * @fn      GenericApp_Init
    171           *
    172           * @brief   Initialization function for the Generic App Task.
    173           *          This is called during initialization and should contain
    174           *          any application specific initialization (ie. hardware
    175           *          initialization/setup, table initialization, power up
    176           *          notificaiton ... ).
    177           *
    178           * @param   task_id - the ID assigned by OSAL.  This ID should be
    179           *                    used to send messages and set timers.
    180           *
    181           * @return  none
    182           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    183          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    184          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    185            GenericApp_TaskID = task_id;
   \   00000B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00000E   F0           MOVX    @DPTR,A
    186            GenericApp_NwkState = DEV_INIT;
   \   00000F   90....       MOV     DPTR,#GenericApp_NwkState
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
    187            GenericApp_TransID = 0;
   \   000015   90....       MOV     DPTR,#GenericApp_TransID
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
    188          
    189            // Device hardware initialization can be added here or in main() (Zmain.c).
    190            // If the hardware is application specific - add it here.
    191            // If the hardware is other parts of the device add it in main().
    192          
    193            GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001A   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   00001D   740F         MOV     A,#0xf
   \   00001F   F0           MOVX    @DPTR,A
    194            GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   000020   A3           INC     DPTR
   \   000021   740A         MOV     A,#0xa
   \   000023   F0           MOVX    @DPTR,A
    195            GenericApp_DstAddr.addr.shortAddr = 0xFFFF;
   \   000024   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000027   74FF         MOV     A,#-0x1
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   F0           MOVX    @DPTR,A
    196            
    197              halUARTCfg_t uartConfig;//∂®“Â“ª∏ˆ¥Æø⁄Ω·ππÃÂ°£
    198              uartConfig.callBackFunc       =    rxCB;
   \   00002C   741B         MOV     A,#0x1b
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   74..         MOV     A,#??rxCB?relay & 0xff
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   74..         MOV     A,#(??rxCB?relay >> 8) & 0xff
   \   000037   12....       LCALL   ?Subroutine0 & 0xFFFF
    199            uartConfig.configured = TRUE;
   \                     ??CrossCallReturnLabel_0:
   \   00003A   7401         MOV     A,#0x1
   \   00003C   F0           MOVX    @DPTR,A
    200            uartConfig.baudRate = HAL_UART_BR_115200;
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   7404         MOV     A,#0x4
   \   000042   F0           MOVX    @DPTR,A
    201            uartConfig.flowControl = FALSE;
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E4           CLR     A
   \   000049   12....       LCALL   ?Subroutine0 & 0xFFFF
    202            HalUARTOpen (0,&uartConfig);
   \                     ??CrossCallReturnLabel_1:
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??HalUARTOpen?relay
    203          
    204            // Fill out the endpoint description.
    205            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000054   90....       MOV     DPTR,#GenericApp_epDesc
   \   000057   740A         MOV     A,#0xa
   \   000059   F0           MOVX    @DPTR,A
    206            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000061   F0           MOVX    @DPTR,A
    207            GenericApp_epDesc.simpleDesc
    208                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000062   A3           INC     DPTR
   \   000063   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   000069   F0           MOVX    @DPTR,A
    209            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00006A   A3           INC     DPTR
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
    210          
    211            // Register the endpoint description with the AF
    212            afRegister( &GenericApp_epDesc );
   \   00006D                ; Setup parameters for call to function afRegister
   \   00006D   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   00006F   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000071   12....       LCALL   ??afRegister?relay
    213          
    214            // Register for all key events - This app will handle all key events
    215            RegisterForKeys( GenericApp_TaskID );
   \   000074                ; Setup parameters for call to function RegisterForKeys
   \   000074   90....       MOV     DPTR,#GenericApp_TaskID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   ??RegisterForKeys?relay
    216          
    217            // Update the display
    218          #if defined ( LCD_SUPPORTED )
    219            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00007C                ; Setup parameters for call to function HalLcdWriteString
   \   00007C   7901         MOV     R1,#0x1
   \   00007E   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   000080   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000082   12....       LCALL   ??HalLcdWriteString?relay
    220          #endif
    221          
    222            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000085                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000085   7A20         MOV     R2,#0x20
   \   000087   7B80         MOV     R3,#-0x80
   \   000089   90....       MOV     DPTR,#GenericApp_TaskID
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F9           MOV     R1,A
   \   00008E   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    223            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   000091                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000091   7A06         MOV     R2,#0x6
   \   000093   7B80         MOV     R3,#-0x80
   \   000095   90....       MOV     DPTR,#GenericApp_TaskID
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    224          
    225          #if defined( IAR_ARMCM3_LM )
    226            // Register this task with RTOS task initiator
    227            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    228          #endif
    229          }
   \   00009D   741D         MOV     A,#0x1d
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A2   7F01         MOV     R7,#0x1
   \   0000A4   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    230          
    231          /*********************************************************************
    232           * @fn      GenericApp_ProcessEvent
    233           *
    234           * @brief   Generic Application Task event processor.  This function
    235           *          is called to process all events for the task.  Events
    236           *          include timers, messages and any other user defined events.
    237           *
    238           * @param   task_id  - The OSAL assigned task ID.
    239           * @param   events - events to process.  This is a bit map and can
    240           *                   contain more than one event.
    241           *
    242           * @return  none
    243           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    245          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    246            afIncomingMSGPacket_t *MSGpkt;
    247            afDataConfirm_t *afDataConfirm;
    248          
    249            // Data Confirmation message fields
    250            byte sentEP;
    251            ZStatus_t sentStatus;
    252            byte sentTransID;       // This should match the value sent
    253            (void)task_id;  // Intentionally unreferenced parameter
    254          
    255            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    256            {
    257              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000015                ; Setup parameters for call to function osal_msg_receive
   \   000015   802B         SJMP    ??GenericApp_ProcessEvent_1
    258              while ( MSGpkt )
    259              {
    260                switch ( MSGpkt->hdr.event )
    261                {
    262                  case ZDO_CB_MSG:
    263                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    264                    break;
    265          
    266                  case KEY_CHANGE:
    267                    GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    268                    break;
    269          
    270                  case AF_DATA_CONFIRM_CMD:
    271                    // This message is received as a confirmation of a data packet sent.
    272                    // The status is of ZStatus_t type [defined in ZComDef.h]
    273                    // The message fields are defined in AF.h
    274                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    275                    sentEP = afDataConfirm->endpoint;
    276                    sentStatus = afDataConfirm->hdr.status;
    277                    sentTransID = afDataConfirm->transID;
    278                    (void)sentEP;
    279                    (void)sentTransID;
    280          
    281                    // Action taken when confirmation is received.
    282                    if ( sentStatus != ZSuccess )
    283                    {
    284                      // The data wasn't delivered -- Do something
    285                    }
    286                    break;
    287          
    288                  case AF_INCOMING_MSG_CMD:
    289                    GenericApp_MessageMSGCB( MSGpkt );
    290                    break;
    291          
    292                  case ZDO_STATE_CHANGE:
    293                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??GenericApp_ProcessEvent_2:
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   90....       MOV     DPTR,#GenericApp_NwkState
   \   00001C   F0           MOVX    @DPTR,A
    294                    if ( (GenericApp_NwkState == DEV_ZB_COORD)
    295                        || (GenericApp_NwkState == DEV_ROUTER)
    296                        || (GenericApp_NwkState == DEV_END_DEVICE) )
   \   00001D   6409         XRL     A,#0x9
   \   00001F   600A         JZ      ??GenericApp_ProcessEvent_3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6407         XRL     A,#0x7
   \   000024   6005         JZ      ??GenericApp_ProcessEvent_3
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6406         XRL     A,#0x6
   \   000029   7010         JNZ     ??GenericApp_ProcessEvent_4
    297                    {
    298                      // Start sending "the" message in a regular interval.
    299                      osal_start_timerEx( GenericApp_TaskID,
    300                                          GENERICAPP_SEND_MSG_EVT,
    301                                          GENERICAPP_SEND_MSG_TIMEOUT );
   \                     ??GenericApp_ProcessEvent_3:
   \   00002B                ; Setup parameters for call to function osal_start_timerEx
   \   00002B   7C88         MOV     R4,#-0x78
   \   00002D   7D13         MOV     R5,#0x13
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   7B00         MOV     R3,#0x0
   \   000033   90....       MOV     DPTR,#GenericApp_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   ??osal_start_timerEx?relay
    302                    }
    303                    break;
    304          
    305                  default:
    306                    break;
    307                }
    308          
    309                // Release the memory
    310                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_4:
   \   00003B                ; Setup parameters for call to function osal_msg_deallocate
   \   00003B   AA..         MOV     R2,?V0 + 0
   \   00003D   AB..         MOV     R3,?V0 + 1
   \   00003F   12....       LCALL   ??osal_msg_deallocate?relay
    311          
    312                // Next
    313                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000042                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   000042   90....       MOV     DPTR,#GenericApp_TaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   ??osal_msg_receive?relay
   \   00004A   8A..         MOV     ?V0 + 0,R2
   \   00004C   8B..         MOV     ?V0 + 1,R3
   \   00004E   E5..         MOV     A,?V0 + 0
   \   000050   45..         ORL     A,?V0 + 1
   \   000052   7003         JNZ     $+5
   \   000054   02....       LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
   \   000057   85..82       MOV     DPL,?V0 + 0
   \   00005A   85..83       MOV     DPH,?V0 + 1
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   24E6         ADD     A,#-0x1a
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
   \   000065   245A         ADD     A,#0x5a
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??GenericApp_ProcessEvent_7 & 0xFFFF
   \   00006C   24EF         ADD     A,#-0x11
   \   00006E   60A7         JZ      ??GenericApp_ProcessEvent_2
   \   000070   24FE         ADD     A,#-0x2
   \   000072   70C7         JNZ     ??GenericApp_ProcessEvent_4
   \   000074   E5..         MOV     A,?V0 + 0
   \   000076   240C         ADD     A,#0xc
   \   000078   F582         MOV     DPL,A
   \   00007A   E5..         MOV     A,?V0 + 1
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F583         MOV     DPH,A
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F5..         MOV     ?V0 + 2,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F5..         MOV     ?V0 + 3,A
   \   000087   78..         MOV     R0,#?V0 + 2
   \   000089   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   00008C   0000         DW        0
   \   00008E   0200         DW        2
   \   000090   0680         DW        32774
   \   000092   ....         DW        ??GenericApp_ProcessEvent_8
   \   000094   2080         DW        32800
   \   000096   ....         DW        ??GenericApp_ProcessEvent_9
   \   000098   ....         DW        ??GenericApp_ProcessEvent_4
   \                     ??GenericApp_ProcessEvent_8:
   \   00009A                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00009A   AA..         MOV     R2,?V0 + 0
   \   00009C   AB..         MOV     R3,?V0 + 1
   \   00009E   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   0000A1   8A..         MOV     ?V0 + 2,R2
   \   0000A3   8B..         MOV     ?V0 + 3,R3
   \   0000A5   EA           MOV     A,R2
   \   0000A6   45..         ORL     A,?V0 + 3
   \   0000A8   6091         JZ      ??GenericApp_ProcessEvent_4
   \   0000AA   8A82         MOV     DPL,R2
   \   0000AC   8B83         MOV     DPH,R3
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   7032         JNZ     ??GenericApp_ProcessEvent_10
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   602C         JZ      ??GenericApp_ProcessEvent_10
   \   0000B7   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000BA   7402         MOV     A,#0x2
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   8A82         MOV     DPL,R2
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F8           MOV     R0,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F9           MOV     R1,A
   \   0000C7   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0000CA   E8           MOV     A,R0
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   E9           MOV     A,R1
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   8A82         MOV     DPL,R2
   \   0000D1   8B83         MOV     DPH,R3
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   0000DB   F0           MOVX    @DPTR,A
   \   0000DC                ; Setup parameters for call to function HalLedSet
   \   0000DC   7A01         MOV     R2,#0x1
   \   0000DE   7908         MOV     R1,#0x8
   \   0000E0   12....       LCALL   ??HalLedSet?relay
   \                     ??GenericApp_ProcessEvent_10:
   \   0000E3                ; Setup parameters for call to function osal_mem_free
   \   0000E3   AA..         MOV     R2,?V0 + 2
   \   0000E5   AB..         MOV     R3,?V0 + 3
   \   0000E7   12....       LCALL   ??osal_mem_free?relay
   \   0000EA   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_9:
   \   0000ED   E5..         MOV     A,?V0 + 0
   \   0000EF   2413         ADD     A,#0x13
   \   0000F1   F582         MOV     DPL,A
   \   0000F3   E5..         MOV     A,?V0 + 1
   \   0000F5   3400         ADDC    A,#0x0
   \   0000F7   F583         MOV     DPH,A
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F8           MOV     R0,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F583         MOV     DPH,A
   \   0000FF   8882         MOV     DPL,R0
   \   000101   E0           MOVX    A,@DPTR
   \   000102   700A         JNZ     ??GenericApp_ProcessEvent_11
   \   000104                ; Setup parameters for call to function HalLedSet
   \   000104   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessEvent_12:
   \   000106   7908         MOV     R1,#0x8
   \   000108   12....       LCALL   ??HalLedSet?relay
   \   00010B   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_11:
   \   00010E                ; Setup parameters for call to function HalLedSet
   \   00010E   7A04         MOV     R2,#0x4
   \   000110   80F4         SJMP    ??GenericApp_ProcessEvent_12
   \                     ??GenericApp_ProcessEvent_7:
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F5..         MOV     ?V0 + 4,A
   \   000118   85..82       MOV     DPL,?V0 + 0
   \   00011B   85..83       MOV     DPH,?V0 + 1
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   6003         JZ      $+5
   \   000123   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000126   E5..         MOV     A,?V0 + 4
   \   000128   A2E1         MOV     C,0xE0 /* A   */.1
   \   00012A   5066         JNC     ??GenericApp_ProcessEvent_13
   \   00012C                ; Setup parameters for call to function HalLedSet
   \   00012C   7A00         MOV     R2,#0x0
   \   00012E   7908         MOV     R1,#0x8
   \   000130   12....       LCALL   ??HalLedSet?relay
   \   000133   7408         MOV     A,#0x8
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   7402         MOV     A,#0x2
   \   00013A   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00013D   E4           CLR     A
   \   00013E   F0           MOVX    @DPTR,A
   \   00013F   A3           INC     DPTR
   \   000140   F0           MOVX    @DPTR,A
   \   000141                ; Setup parameters for call to function NLME_GetShortAddr
   \   000141   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000144   8A..         MOV     ?V0 + 2,R2
   \   000146   8B..         MOV     ?V0 + 3,R3
   \   000148   AC..         MOV     R4,?V0 + 2
   \   00014A   AD..         MOV     R5,?V0 + 3
   \   00014C   75....       MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
   \   00014F   75....       MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
   \   000152                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000152   75..00       MOV     ?V0 + 5,#0x0
   \   000155   78..         MOV     R0,#?V0 + 5
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015A   78..         MOV     R0,#?V0 + 2
   \   00015C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015F   75..04       MOV     ?V0 + 5,#0x4
   \   000162   78..         MOV     R0,#?V0 + 5
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000167   78..         MOV     R0,#?V0 + 2
   \   000169   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016C   75..04       MOV     ?V0 + 2,#0x4
   \   00016F   78..         MOV     R0,#?V0 + 2
   \   000171   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000174   75..0F       MOV     ?V0 + 3,#0xf
   \   000177   78..         MOV     R0,#?V0 + 2
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017C   90....       MOV     DPTR,#GenericApp_epDesc
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   F9           MOV     R1,A
   \   000181   7409         MOV     A,#0x9
   \   000183   12....       LCALL   ?XSTACK_DISP0_8
   \   000186   AA82         MOV     R2,DPL
   \   000188   AB83         MOV     R3,DPH
   \   00018A   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00018D   7409         MOV     A,#0x9
   \   00018F   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??GenericApp_ProcessEvent_13:
   \   000192   E5..         MOV     A,?V0 + 4
   \   000194   A2E3         MOV     C,0xE0 /* A   */.3
   \   000196   4003         JC      $+5
   \   000198   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   00019B                ; Setup parameters for call to function HalLedSet
   \   00019B   7A00         MOV     R2,#0x0
   \   00019D   7908         MOV     R1,#0x8
   \   00019F   12....       LCALL   ??HalLedSet?relay
   \   0001A2   7408         MOV     A,#0x8
   \   0001A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A7   740F         MOV     A,#0xf
   \   0001A9   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001AC   74FF         MOV     A,#-0x1
   \   0001AE   F0           MOVX    @DPTR,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   F0           MOVX    @DPTR,A
   \   0001B1   75....       MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
   \   0001B4   75....       MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
   \   0001B7                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0001B7   75..00       MOV     ?V0 + 4,#0x0
   \   0001BA   78..         MOV     R0,#?V0 + 4
   \   0001BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001BF   78..         MOV     R0,#?V0 + 2
   \   0001C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C4   75..04       MOV     ?V0 + 4,#0x4
   \   0001C7   78..         MOV     R0,#?V0 + 4
   \   0001C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CC   78..         MOV     R0,#?V0 + 2
   \   0001CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D1   75..04       MOV     ?V0 + 2,#0x4
   \   0001D4   75..0F       MOV     ?V0 + 3,#0xf
   \   0001D7   78..         MOV     R0,#?V0 + 2
   \   0001D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DC   7904         MOV     R1,#0x4
   \   0001DE   7CFF         MOV     R4,#-0x1
   \   0001E0   7DFF         MOV     R5,#-0x1
   \   0001E2   7408         MOV     A,#0x8
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   AA82         MOV     R2,DPL
   \   0001E9   AB83         MOV     R3,DPH
   \   0001EB   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0001EE   7408         MOV     A,#0x8
   \   0001F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F3   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_6:
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   A3           INC     DPTR
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   6403         XRL     A,#0x3
   \   0001FD   7002         JNZ     ??GenericApp_ProcessEvent_14
   \   0001FF   A3           INC     DPTR
   \   000200   E0           MOVX    A,@DPTR
   \                     ??GenericApp_ProcessEvent_14:
   \   000201   6003         JZ      $+5
   \   000203   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000206                ; Setup parameters for call to function HalUARTWrite
   \   000206   7C0E         MOV     R4,#0xe
   \   000208   7D00         MOV     R5,#0x0
   \   00020A   E5..         MOV     A,?V0 + 0
   \   00020C   2422         ADD     A,#0x22
   \   00020E   F582         MOV     DPL,A
   \   000210   E5..         MOV     A,?V0 + 1
   \   000212   3400         ADDC    A,#0x0
   \   000214   F583         MOV     DPH,A
   \   000216   E0           MOVX    A,@DPTR
   \   000217   FA           MOV     R2,A
   \   000218   A3           INC     DPTR
   \   000219   E0           MOVX    A,@DPTR
   \   00021A   FB           MOV     R3,A
   \   00021B   7900         MOV     R1,#0x0
   \   00021D   12....       LCALL   ??HalUARTWrite?relay
   \   000220                ; Setup parameters for call to function HalUARTWrite
   \   000220   7C01         MOV     R4,#0x1
   \   000222   7D00         MOV     R5,#0x0
   \   000224   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000226   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000228   7900         MOV     R1,#0x0
   \   00022A   12....       LCALL   ??HalUARTWrite?relay
   \   00022D   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
    314              }
    315          
    316              // return unprocessed events
    317              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_5:
   \   000230   EE           MOV     A,R6
   \   000231   FA           MOV     R2,A
   \   000232   EF           MOV     A,R7
   \   000233   6480         XRL     A,#0x80
   \                     ??GenericApp_ProcessEvent_15:
   \   000235   FB           MOV     R3,A
   \   000236   8020         SJMP    ??GenericApp_ProcessEvent_16
    318            }
    319          
    320            // Send a message out - This event is generated by a timer
    321            //  (setup in GenericApp_Init()).
    322            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   000238   EE           MOV     A,R6
   \   000239   A2E0         MOV     C,0xE0 /* A   */.0
   \   00023B   5017         JNC     ??GenericApp_ProcessEvent_17
    323            {
    324              // Send "the" message
    325              GenericApp_SendTheMessage();
    326          
    327              // Setup to send message again
    328              osal_start_timerEx( GenericApp_TaskID,
    329                                  GENERICAPP_SEND_MSG_EVT,
    330                                  GENERICAPP_SEND_MSG_TIMEOUT );
   \   00023D                ; Setup parameters for call to function osal_start_timerEx
   \   00023D   7C88         MOV     R4,#-0x78
   \   00023F   7D13         MOV     R5,#0x13
   \   000241   7A01         MOV     R2,#0x1
   \   000243   7B00         MOV     R3,#0x0
   \   000245   90....       MOV     DPTR,#GenericApp_TaskID
   \   000248   E0           MOVX    A,@DPTR
   \   000249   F9           MOV     R1,A
   \   00024A   12....       LCALL   ??osal_start_timerEx?relay
    331          
    332              // return unprocessed events
    333              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \   00024D   EE           MOV     A,R6
   \   00024E   6401         XRL     A,#0x1
   \   000250   FA           MOV     R2,A
   \   000251   EF           MOV     A,R7
   \   000252   80E1         SJMP    ??GenericApp_ProcessEvent_15
    334            }
    335          
    336            
    337          #if defined( IAR_ARMCM3_LM )
    338            // Receive a message from the RTOS queue
    339            if ( events & GENERICAPP_RTOS_MSG_EVT )
    340            {
    341              // Process message from RTOS queue
    342              GenericApp_ProcessRtosMessage();
    343          
    344              // return unprocessed events
    345              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    346            }
    347          #endif
    348          
    349            // Discard unknown events
    350            return 0;
   \                     ??GenericApp_ProcessEvent_17:
   \   000254   7A00         MOV     R2,#0x0
   \   000256   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_16:
   \   000258   7409         MOV     A,#0x9
   \   00025A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025D   7F06         MOV     R7,#0x6
   \   00025F   02....       LJMP    ?BANKED_LEAVE_XDATA
    351          }
    352          
    353          /*********************************************************************
    354           * Event Generation Functions
    355           */
    356          
    357          /*********************************************************************
    358           * @fn      GenericApp_ProcessZDOMsgs()
    359           *
    360           * @brief   Process response messages
    361           *
    362           * @param   none
    363           *
    364           * @return  none
    365           */
    366          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    367          {
    368            switch ( inMsg->clusterID )
    369            {
    370              case End_Device_Bind_rsp:
    371                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    372                {
    373                  // Light LED
    374                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    375                }
    376          #if defined( BLINK_LEDS )
    377                else
    378                {
    379                  // Flash LED to show failure
    380                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    381                }
    382          #endif
    383                break;
    384          
    385              case Match_Desc_rsp:
    386                {
    387                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    388                  if ( pRsp )
    389                  {
    390                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    391                    {
    392                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    393                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    394                      // Take the first endpoint, Can be changed to search through endpoints
    395                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
    396          
    397                      // Light LED
    398                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    399                    }
    400                    osal_mem_free( pRsp );
    401                  }
    402                }
    403                break;
    404            }
    405          }
    406          
    407          /*********************************************************************
    408           * @fn      GenericApp_HandleKeys
    409           *
    410           * @brief   Handles all key events for this device.
    411           *
    412           * @param   shift - true if in shift/alt.
    413           * @param   keys - bit field for key events. Valid entries:
    414           *                 HAL_KEY_SW_4
    415           *                 HAL_KEY_SW_3
    416           *                 HAL_KEY_SW_2
    417           *                 HAL_KEY_SW_1
    418           *
    419           * @return  none
    420           */
    421          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    422          {
    423            zAddrType_t dstAddr;
    424          
    425            // Shift is used to make each button/switch dual purpose.
    426            if ( shift )
    427            {
    428              if ( keys & HAL_KEY_SW_1 )
    429              {
    430              }
    431              if ( keys & HAL_KEY_SW_2 )
    432              {
    433              }
    434              if ( keys & HAL_KEY_SW_3 )
    435              {
    436              }
    437              if ( keys & HAL_KEY_SW_4 )
    438              {
    439              }
    440            }
    441            else
    442            {
    443              if ( keys & HAL_KEY_SW_1 )
    444              {
    445                // Since SW1 isn't used for anything else in this application...
    446          #if defined( SWITCH1_BIND )
    447                // we can use SW1 to simulate SW2 for devices that only have one switch,
    448                keys |= HAL_KEY_SW_2;
    449          #elif defined( SWITCH1_MATCH )
    450                // or use SW1 to simulate SW4 for devices that only have one switch
    451                keys |= HAL_KEY_SW_4;
    452          #endif
    453              }
    454          
    455              if ( keys & HAL_KEY_SW_2 )
    456              {
    457                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    458          
    459                // Initiate an End Device Bind Request for the mandatory endpoint
    460                dstAddr.addrMode = Addr16Bit;
    461                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    462                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    463                                      GenericApp_epDesc.endPoint,
    464                                      GENERICAPP_PROFID,
    465                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    466                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    467                                      FALSE );
    468              }
    469          
    470              if ( keys & HAL_KEY_SW_3 )
    471              {
    472              }
    473          
    474              if ( keys & HAL_KEY_SW_4 )
    475              {
    476                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    477                // Initiate a Match Description Request (Service Discovery)
    478                dstAddr.addrMode = AddrBroadcast;
    479                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    480                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    481                                  GENERICAPP_PROFID,
    482                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    483                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    484                                  FALSE );
    485              }
    486            }
    487          }
    488          
    489          /*********************************************************************
    490           * LOCAL FUNCTIONS
    491           */
    492          
    493          /*********************************************************************
    494           * @fn      GenericApp_MessageMSGCB
    495           *
    496           * @brief   Data message processor callback.  This function processes
    497           *          any incoming data - probably from other devices.  So, based
    498           *          on cluster ID, perform the intended action.
    499           *
    500           * @param   none
    501           *
    502           * @return  none
    503           */
    504          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    505          {
    506          
    507            
    508            switch ( pkt->clusterId )
    509            {
    510                case GENERICAPP_wenshidu_CLUSTERID:
    511                   HalUARTWrite(0,pkt->cmd.Data,14);//œÚ¥Æø⁄ ‰≥ˆ–≈œ¢
    512                  HalUARTWrite(0,"\n", 1);
    513                break;
    514                
    515                case GenericApp_Guangqiang_CLUSTERID:
    516          
    517                break;
    518                  
    519                case GenericApp_rentihongwai_CLUSTERID:
    520          
    521                  break;
    522                  
    523                case GenericApp_wendu_CLUSTERID:
    524          
    525                break;
    526            }
    527             
    528          }
    529          //ªÿµ˜∫Ø ˝£¨¥”¥Æø⁄0∂¡»°2∏ˆ◊÷∑˚£¨∑≈Ω¯uartbuf

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          static void rxCB(uint8 port,uint8 event)
   \                     rxCB:
    531          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    532            uint8 uartbuf[2];
    533            HalUARTRead(0,uartbuf,2);
   \   00000A                ; Setup parameters for call to function HalUARTRead
   \   00000A   7C02         MOV     R4,#0x2
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AA82         MOV     R2,DPL
   \   000016   AB83         MOV     R3,DPH
   \   000018   7900         MOV     R1,#0x0
   \   00001A   12....       LCALL   ??HalUARTRead?relay
    534          
    535          
    536              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    537                                   GENERICAPP_CLUSTERID,
    538                                   2,
    539                                   uartbuf,
    540                                   &GenericApp_TransID,
    541                                   AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
   \   00001D                ; Setup parameters for call to function AF_DataRequest
   \   00001D   75..1E       MOV     ?V0 + 0,#0x1e
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   75....       MOV     ?V0 + 0,#GenericApp_TransID & 0xff
   \   000028   75....       MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   8582..       MOV     ?V0 + 0,DPL
   \   000038   8583..       MOV     ?V0 + 1,DPH
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..02       MOV     ?V0 + 0,#0x2
   \   000043   75..00       MOV     ?V0 + 1,#0x0
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..01       MOV     ?V0 + 0,#0x1
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   7920         MOV     R1,#0x20
   \   000055   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   000057   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000059   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   00005B   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   00005D   12....       LCALL   ??AF_DataRequest?relay
   \   000060   7409         MOV     A,#0x9
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
    542           
    543            
    544               // for(i = 0;i<3; i++)
    545              //uartbuf [i] = 0;
    546          }
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   7F02         MOV     R7,#0x2
   \   00006C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"
    547          
    548          /*********************************************************************
    549           * @fn      GenericApp_SendTheMessage
    550           *
    551           * @brief   Send "the" message.
    552           *
    553           * @param   none
    554           *
    555           * @return  none
    556           */
    557          static void GenericApp_SendTheMessage( void )
    558          {
    559            /*char theMessageData[] = "Hello World";
    560          
    561            if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    562                                 GENERICAPP_CLUSTERID,
    563                                 (byte)osal_strlen( theMessageData ) + 1,
    564                                 (byte *)&theMessageData,
    565                                 &GenericApp_TransID,
    566                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    567            {
    568              // Successfully requested to be sent.
    569            }
    570            else
    571            {
    572              // Error occurred in request to send.
    573            }*/
    574          }
    575          
    576          #if defined( IAR_ARMCM3_LM )
    577          /*********************************************************************
    578           * @fn      GenericApp_ProcessRtosMessage
    579           *
    580           * @brief   Receive message from RTOS queue, send response back.
    581           *
    582           * @param   none
    583           *
    584           * @return  none
    585           */
    586          static void GenericApp_ProcessRtosMessage( void )
    587          {
    588            osalQueue_t inMsg;
    589          
    590            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
    591            {
    592              uint8 cmndId = inMsg.cmnd;
    593              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
    594          
    595              switch ( cmndId )
    596              {
    597                case CMD_INCR:
    598                  counter += 1;  /* Increment the incoming counter */
    599                                 /* Intentionally fall through next case */
    600          
    601                case CMD_ECHO:
    602                {
    603                  userQueue_t outMsg;
    604          
    605                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
    606                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
    607                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
    608                  break;
    609                }
    610                
    611                default:
    612                  break;  /* Ignore unknown command */    
    613              }
    614            }
    615          }
    616          #endif
    617          
    618          /*********************************************************************
    619           */

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     GenericApp_Init                0      0     38
       -> HalUARTOpen               0      0     76
       -> afRegister                0      0     76
       -> RegisterForKeys           0      0     76
       -> HalLcdWriteString         0      0     76
       -> ZDO_RegisterForZDOMsg     0      0     76
       -> ZDO_RegisterForZDOMsg     0      0     76
     GenericApp_ProcessEvent        0      0     32
       -> osal_msg_receive          0      0     46
       -> osal_start_timerEx        0      0     46
       -> osal_msg_deallocate       0      0     46
       -> osal_msg_receive          0      0     46
       -> ZDO_ParseEPListRsp        0      0     46
       -> HalLedSet                 0      0     46
       -> osal_mem_free             0      0     46
       -> HalLedSet                 0      0     46
       -> HalLedSet                 0      0     46
       -> HalLedSet                 0      0     46
       -> NLME_GetShortAddr         0      0     46
       -> ZDP_EndDeviceBindReq      0      0     64
       -> HalLedSet                 0      0     46
       -> ZDP_MatchDescReq          0      0     62
       -> HalUARTWrite              0      0     46
       -> HalUARTWrite              0      0     46
       -> osal_start_timerEx        0      0     46
     rxCB                           0      0     21
       -> HalUARTRead               0      0     24
       -> AF_DataRequest            0      0     42


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     GenericApp_ClusterList             8
     GenericApp_SimpleDesc             12
     GenericApp_epDesc                  6
     GenericApp_TaskID                  1
     GenericApp_NwkState                1
     GenericApp_TransID                 1
     GenericApp_DstAddr                12
     GenericApp_Init                  167
     ?Subroutine0                       8
     GenericApp_ProcessEvent          610
     rxCB                             111
     ??GenericApp_Init?relay            6
     ??GenericApp_ProcessEvent?relay    6
     ??rxCB?relay                       6
     ?<Constant "GenericApp">          11
     ?<Constant "\n">                   2

 
 896 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
  33 bytes in segment XDATA_ROM_C
  21 bytes in segment XDATA_Z
 
 914 bytes of CODE  memory
  33 bytes of CONST memory
  21 bytes of XDATA memory

Errors: none
Warnings: none
